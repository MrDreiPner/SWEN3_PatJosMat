/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using NPaperless.REST.Attributes;
using NPaperless.REST;
using log4net;
using NPaperless.BusinessLogic.Services;
using NPaperless.BusinessLogic.Interfaces;
using System.IO.Pipelines;
using System.Linq;

namespace NPaperless.REST.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SearchApiController : ControllerBase
    { 
        private readonly ILog _logger = LogManager.GetLogger(typeof(SearchApiController));
        private readonly IElastic _elastic;

        public SearchApiController(IElastic elastic)
        {
            _elastic = elastic;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="term"></param>
        /// <param name="limit"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/search/autocomplete")]
        [ValidateModelState]
        [SwaggerOperation("AutoComplete")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Success")]
        public virtual IActionResult AutoComplete([FromQuery (Name = "term")]string term, [FromQuery (Name = "limit")]int? limit)
        {
            _logger.Info("got search request with search term: " + term);
            var searchResult = _elastic.SearchDocumentAsync(term);
            string responseResult = "Found documents:\n";
            if(searchResult != null)
            {
                foreach (var doc in searchResult)
                {
                    responseResult += (doc.Title + ": " + doc.Content);
                }
            }    
            return new ObjectResult(responseResult);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));
            //string exampleJson = null;
            //exampleJson = "[ \"\", \"\" ]";
            
            //var example = exampleJson != null
            //? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            //: default(List<string>);
            ////TODO: Change the data returned
            //return new ObjectResult(example);
        }
    }
}
